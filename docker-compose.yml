x-traefik-labels: &traefik-labels
  traefik.enable: "true"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 5

x-networks-default: &networks-default
  networks:
    - traefik
    - backend

services:
  traefik:
    image: traefik:v2.5
    container_name: "traefik"
    command:
      - -configFile=/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - ./dockers/traefik/traefik.yml:/traefik.yml
    labels:
      <<: *traefik-labels
      traefik.http.routers.api.rule: "Host(`traefik.localhost`)"
      traefik.http.routers.api.service: "api@internal"
    networks:
      traefik:
        ipv4_address: 10.0.0.254

  identity:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: "keycloak"
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_DATABASE: ${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HOSTNAME: identity.localhost
    volumes:
      - ./dockers/identity/realms:/opt/keycloak/data/import
    command: ["start-dev", "--import-realm"]
    labels:
      <<: *traefik-labels
      traefik.docker.network: "nodejs-msa-traefik"
      traefik.http.routers.identity.rule: "Host(`identity.localhost`)"
      traefik.http.services.identity.loadbalancer.server.port: "8080"
    <<: *networks-default

  kafka:
    image: confluentinc/cp-kafka:7.4.6
    container_name: "kafka"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
      <<: *healthcheck-defaults

  db:
    image: postgres:16
    container_name: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./dockers/db/postgres-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    labels:
      <<: *traefik-labels
      traefik.http.routers.postgres.rule: "Host(`postgres.localhost`)"
      traefik.http.services.postgres.loadbalancer.server.port: "5432"
    <<: *networks-default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      <<: *healthcheck-defaults

  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: "elasticsearch"
    environment:
      discovery.type: single-node
    labels:
      <<: *traefik-labels
      traefik.docker.network: "nodejs-msa-traefik"
      traefik.http.routers.elasticsearch.rule: "Host(`elasticsearch.localhost`)"
      traefik.http.services.elasticsearch.loadbalancer.server.port: "9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    <<: *networks-default

  grafana:
    image: grafana/grafana
    container_name: "grafana"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
    labels:
      <<: *traefik-labels
      traefik.docker.network: "nodejs-msa-traefik"
      traefik.http.routers.grafana.rule: "Host(`grafana.localhost`)"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    <<: *networks-default
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      <<: *healthcheck-defaults

  # Backend APP
  bff:
    build:
      context: ./backend/nestjs
      target: dev
      dockerfile: ./apps/bff-service/Dockerfile
    image: nodejs-msa-bff:dev
    container_name: bff
    ports:
      - "3001:3000"
    volumes:
      - ./backend/nestjs/apps/bff-service:/usr/src/app/apps/bff-service
      - ./backend/nestjs/libs:/usr/src/app/libs
    command: ["nest", "start", "bff-service", "--watch"]
    networks:
      - backend

  listing:
    build:
      context: ./backend/nestjs
      target: dev
      dockerfile: ./apps/listing-service/Dockerfile
    image: nodejs-msa-listing:dev
    container_name: listing
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "3002:3000"
    volumes:
      - ./backend/nestjs/apps/listing-service:/usr/src/app/apps/listing-service
      - ./backend/nestjs/libs:/usr/src/app/libs
    command: ["nest", "start", "listing-service", "--watch"]
    networks:
      - backend

  reservation:
    build:
      context: ./backend/nestjs
      target: dev
      dockerfile: ./apps/reservation-service/Dockerfile
    image: nodejs-msa-reservation:dev
    container_name: reservation
    ports:
      - "3003:3000"
    volumes:
      - ./backend/nestjs/apps/reservation-service:/usr/src/app/apps/reservation-service
      - ./backend/nestjs/libs:/usr/src/app/libs
    command: ["nest", "start", "reservation-service", "--watch"]
    networks:
      - backend

  payment:
    build:
      context: ./backend/nestjs
      target: dev
      dockerfile: ./apps/payment-service/Dockerfile
    image: nodejs-msa-payment:dev
    container_name: payment
    ports:
      - "3004:3000"
    volumes:
      - ./backend/nestjs/apps/payment-service:/usr/src/app/apps/payment-service
      - ./backend/nestjs/libs:/usr/src/app/libs
    command: ["nest", "start", "payment-service", "--watch"]
    networks:
      - backend

  search:
    build:
      context: ./backend/nestjs
      target: dev
      dockerfile: ./apps/search-service/Dockerfile
    image: nodejs-msa-search:dev
    container_name: search
    ports:
      - "3005:3000"
    volumes:
      - ./backend/nestjs/apps/search-service:/usr/src/app/apps/search-service
      - ./backend/nestjs/libs:/usr/src/app/libs
    command: ["nest", "start", "search-service", "--watch"]
    networks:
      - backend

  # Frontend APP
  admin:
    build:
      context: ./frontend/admin
      target: dev
      dockerfile: Dockerfile
    image: nodejs-msa-adminpage:dev
    container_name: admin
    ports:
      - "4000:3000"
    volumes:
      - ./frontend/admin/src:/usr/src/app/src
    extra_hosts:
      - "identity.localhost:10.0.0.254"
    command: ["npm", "run", "dev"]
    networks:
      - traefik
    environment:
      NEXT_PUBLIC_BFF_SERVICE_URL: ${NEXT_PUBLIC_BFF_SERVICE_URL}
      AUTH_CLIENT_ID: ${AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      AUTH_TENANT: ${AUTH_TENANT}
      AUTH_PROVIDER_URL: ${AUTH_PROVIDER_URL}
      AUTH_ISSUER: ${AUTH_ISSUER}
      AUTH_OPENID_CONFIGURATION_URL: ${AUTH_OPENID_CONFIGURATION_URL}
    labels:
      <<: *traefik-labels
      traefik.docker.network: "nodejs-msa-traefik"
      traefik.http.routers.admin.rule: "Host(`admin.localhost`)"
      traefik.http.services.admin.loadbalancer.server.port: "3000"

  webapp:
    build:
      context: ./frontend/webapp
      target: dev
      dockerfile: Dockerfile
    image: nodejs-msa-webapp:dev
    container_name: webapp
    ports:
      - "4001:3000"
    volumes:
      - ./frontend/webapp:/usr/src/app
    command: [ "npm", "run", "dev" ]
    networks:
      - traefik
    labels:
      <<: *traefik-labels
      traefik.docker.network: "nodejs-msa-traefik"
      traefik.http.routers.webapp.rule: "Host(`node-msa.localhost`)"
      traefik.http.services.webapp.loadbalancer.server.port: "3000"

volumes:
  traefik-certificates:
    name: nodejs-msa-traefik-certificates
  kafka-data:
    name: nodejs-msa-kafka-data
  elasticsearch-data:
    name: nodejs-msa-elasticsearch-data
  grafana-data:
    name: nodejs-msa-grafana-data

networks:
  traefik:
    name: nodejs-msa-traefik
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16
  backend:
    name: nodejs-msa-backend
    driver: bridge
