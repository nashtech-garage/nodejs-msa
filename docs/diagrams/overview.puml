@startuml Overview
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!include <logos/nestjs.puml>
!include <logos/strapi.puml>
!include <logos/nextjs.puml>
!include <logos/new-relic.puml>
!include <logos/postgresql.puml>
!include <logos/mysql.puml>
!include <logos/kafka.puml>
!include <logos/rabbitmq.puml>
!include <logos/elasticsearch.puml>
!include <cloudinsight/keycloak.puml>

title Overview

LAYOUT_LANDSCAPE()
SHOW_PERSON_PORTRAIT()

AddBoundaryTag(systemTag, $borderColor="", $type="System context")
AddBoundaryTag(feSitesTag, $borderColor="DarkBlue", $bgColor="LightBlue", $type="Frontend sites")
AddBoundaryTag(coreTag, $borderColor="DarkRed", $bgColor="LightPink", $type="Cores")
AddBoundaryTag(dataStoreTag, $borderColor="", $bgColor="LightYellow", $type="Data store")

Person(anonymous, "Anonymous", "Access to public pages")
Person(user, "User", "Access to protected pages")
Person(ops, "Operator", "Manage content")
Person(admin, "Administrator", "Manage system")

System_Boundary(systemB, "System context", $tags="systemTag") {
  System_Boundary(feSystemB, "Frontend", $tags="feSitesTag") {
    Container(fePublic, "Public routes", "NextJS 13", $sprite="nextjs")
    Container(feProtected, "Protected routes", "NextJS 13", $sprite="nextjs")

    Container(feDashboard, "Dashboard", "NextJS 13", $sprite="nextjs")
  }

  System_Boundary(cores, "Cores", $tags="coreTag") {
    Container(coreNestJs, "NestJS", $descr="For building efficient, reliable and scalable server-side applications", $sprite="nestjs")
    Container(coreStrApi, "StrApi", $descr="Content management system", $sprite="strapi")
  }
  
  Container(keycloak, "Identity", "Keycloak", $descr="Identity and access management solution", $sprite="keycloak", $link="https://www.keycloak.org/")

  System_Boundary(databases, "Databases") {
    ContainerDb(postgres, "Postgres", $sprite="postgresql")
    ContainerDb(MySQL, "MySQL", $sprite="mysql")
  }

  System_Boundary(messageQueues, "Message queues") {
    ContainerQueue(kafka, "Kafka", $sprite="kafka")
    ContainerQueue(rabitMQ, "Rabit MQ", $sprite="rabbitmq")
  }

  System_Boundary(observers, "Observers"){
    Container(newRelic, "New Relic", $sprite="new-relic", $link="https://newrelic.com/")
    Container(elasticsearch, "Elastic search", $sprite="elasticsearch", $link="https://www.elastic.co/elasticsearch/")
  }

  System_Boundary(minIoB, "Min IO"){
    Container(minIoConsole, "MinIO console", $descr="Simple UI for MinIO Object Storage ðŸ§®", $link="https://github.com/minio/console")
    ContainerDb(minIoServer, "MinIO server", $descr="High Performance Object Storage for AI", $link="https://github.com/minio/minio")
  }
}

Rel(anonymous, fePublic, "View", "Web browsers")
Rel(user, feProtected, "Use", "Web browsers")
Rel(ops, feDashboard, "Manage", "Web browsers")
Rel(admin, feDashboard, "Manage", "Web browsers")

Rel(ops, minIoConsole, "Manage", "Web browsers")
Rel(admin, minIoConsole, "Manage", "Web browsers")

Rel(minIoConsole, minIoServer, "Manage", "HTTPS")
Rel(coreStrApi, minIoServer, "Manage", "HTTPS")

Rel(feSystemB, minIoB, "CDN", "HTTPS")
Rel(feSystemB, cores, "Sync", "JSON/HTTPS")

Rel(feSystemB, keycloak, "Authenticate/Authorise")
Rel(cores, keycloak, "Authenticate/Authorise")

Rel(cores, databases, "Query", "TCP/IP")

Rel(cores, messageQueues, "Produce", "TCP/IP")
Rel(messageQueues, cores, "Consume", "TCP/IP")

Rel(cores, observers, "Stream log", "TCP/IP")
Rel(feSystemB, observers, "Stream log", "TCP/IP")

Rel(fePublic, elasticsearch, "Search full text", "JSON/HTTPS")

SHOW_LEGEND()

@enduml
